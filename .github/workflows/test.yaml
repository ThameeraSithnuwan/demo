name: Test Job Outputs with Tickets

on:
  workflow_dispatch:
    inputs:
      tickets:
        description: 'Comma separated tickets'
        required: false
        type: string
      commitId:
        description: 'Specific commit ID'
        required: false
        type: string
      branchName:
        description: 'Branch name'
        required: false
        type: string
  push:
      branches: 
        - main
jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      commit_id: ${{ steps.checkout-commit.outputs.commit_id }}
      steps_can_proceed: ${{ env.STEPS_CAN_PROCEED }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Checkout Specific Commit (Simulate Ticket Merging)
      id: checkout-commit
      env:
        TICKETS: test1,test2
        COMMIT_ID: ${{ inputs.commitId }}
        BRANCH_NAME: main
      run: |
        echo "Starting checkout process..."
        echo "TICKETS: $TICKETS"
        echo "COMMIT_ID: $COMMIT_ID"
        echo "BRANCH_NAME: $BRANCH_NAME"
        
        git fetch --all
        
        # Simulate ticket merging scenario
        if [ -n "$TICKETS" ]; then
          echo "Tickets provided: $TICKETS"
          
          # Simulate merge operations
          echo "Simulating merge operations for tickets..."
          
          # Get current commit after "merges"
          MERGED_COMMIT_ID=$(git rev-parse HEAD)
          echo "Merged Commit ID: $MERGED_COMMIT_ID"
          
          # Set outputs
          echo "commit_id=$MERGED_COMMIT_ID" >> $GITHUB_OUTPUT
          echo "COMMIT_ID=$MERGED_COMMIT_ID" >> $GITHUB_ENV
          echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
          
        elif [ -n "$COMMIT_ID" ]; then
          echo "Commit ID provided: $COMMIT_ID"
          git checkout $COMMIT_ID || true
          echo "commit_id=$COMMIT_ID" >> $GITHUB_OUTPUT
          echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
          
        else
          echo "No tickets or commit ID - using default"
          DEFAULT_COMMIT_ID=$(git rev-parse HEAD)
          echo "commit_id=$DEFAULT_COMMIT_ID" >> $GITHUB_OUTPUT
          echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
        fi
    
    - name: Debug Build Outputs
      run: |
        echo "=== Build Job Debug Info ==="
        echo "Step checkout-commit outputs:"
        echo "  commit_id: ${{ steps.checkout-commit.outputs.commit_id }}"
        echo "Environment:"
        echo "  COMMIT_ID: ${{ env.COMMIT_ID }}"
        echo "  STEPS_CAN_PROCEED: ${{ env.STEPS_CAN_PROCEED }}"
        echo "Job outputs that will be passed:"
        echo "  commit_id: ${{ steps.checkout-commit.outputs.commit_id }}"
        echo "  steps_can_proceed: ${{ env.STEPS_CAN_PROCEED }}"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      COMMIT_ID: ${{ needs.build-and-push.outputs.commit_id }}
    steps:
    - name: Debug Received Outputs
      run: |
        echo $COMMIT_ID
        echo "Received from build-and-push:"
        echo "  commit_id: ${{ needs.build-and-push.outputs.commit_id }}"
        echo "  steps_can_proceed: ${{ needs.build-and-push.outputs.steps_can_proceed }}"
        
        echo "Original inputs:"
        echo "  tickets: ${{ inputs.tickets }}"
        echo "  commitId: ${{ inputs.commitId }}"
        echo "  branchName: ${{ inputs.branchName }}"
        
        echo "GitHub context:"
        echo "  github.sha: ${{ github.sha }}"
        
        # Test different ways to set COMMIT_ID
        echo "=== Testing COMMIT_ID assignment ==="
        echo "Method 1 - Only from outputs: ${{ needs.build-and-push.outputs.commit_id }}"
        echo "Method 2 - With fallback: ${{ needs.build-and-push.outputs.commit_id || inputs.commitId || github.sha }}"
